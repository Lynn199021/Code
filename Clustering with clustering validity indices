# Clustering
clear all; clc; close all;  
warning off;
[X1, Y1, Z1] = xlsread('聚类数据.xlsx');
Xdata = cell2mat(Z1(2:end,2:end));
Xdata(isnan(Xdata)) = 0; 
Xdata = Xdata;
X_min = min(Xdata, [],1);
X_max = max(Xdata, [],1);
[m, n] = size(Xdata);

Xdata2 = (Xdata - repmat(X_min, m, 1))./repmat(X_max - X_min, m, 1);

K = 7;
[Index1, C1, SUM1, D1] = kmeans(Xdata2, K);
InventorList = {};
for i = 2:size(Z1,1)
    InventorList{i - 1, 1} = [sprintf('Inventor%d %s', i - 1, Z1{i,1})];
end
fcell = {};
for i = 1:max(Index1(:))
    I1 = find(Index1 == i);
    fcell{1,i} = sprintf('聚类组%d成员', i);
    for j = 1:length(I1)
        fcell{j + 1, i} = InventorList{I1(j)};
    end
end


fide1 = fopen('聚类结果.csv', 'w');
for i = 1:size(fcell,1)
    Tcell = fcell(i,:);
    for j = 1:length(Tcell) - 1
        fprintf(fide1, '%s,', num2str(Tcell{j}));
    end
    fprintf(fide1, '%s\n', Tcell{end});
end
fclose(fide1);

Ks = [2:12];


# Clustering validity indices


Xdata2 = Xdata2;
rng('default');  % For reproducibility


CalinskiHarabasz_Num = zeros(1, length(Ks));
CalinskiHarabasz_Weight = zeros(1, length(Ks));

DaviesBouldin_Num = zeros(1, length(Ks));
DaviesBouldin_Weight = zeros(1, length(Ks));

Silhouette_Num = zeros(1, length(Ks));
Silhouette_Weight = zeros(1, length(Ks));

for i = 1:100
    cluster = zeros(size(Xdata,1), length(Ks));
    for j = 1:length(Ks)
        cluster(:,j) = kmeans(Xdata, Ks(j));
    end
    obj1 = evalclusters(Xdata2, cluster, 'CalinskiHarabasz');
    CalinskiHarabasz_Num(find(Ks == obj1.OptimalK)) = 1 + CalinskiHarabasz_Num(find(Ks == obj1.OptimalK)); 
    CalinskiHarabasz_Weight = CalinskiHarabasz_Weight + obj1.CriterionValues;
    
    obj2 = evalclusters(Xdata2, cluster, 'DaviesBouldin');
    DaviesBouldin_Num(find(Ks == obj2.OptimalK)) = 1 + DaviesBouldin_Num(find(Ks == obj2.OptimalK));     
    DaviesBouldin_Weight = DaviesBouldin_Weight + obj2.CriterionValues;
    
    obj4 = evalclusters(Xdata2, cluster, 'Silhouette');
    Silhouette_Num(find(Ks == obj4.OptimalK)) = 1 + Silhouette_Num(find(Ks == obj4.OptimalK));           
    Silhouette_Weight =  Silhouette_Weight + obj4.CriterionValues;
    
    fprintf('%d\n', i);
end


CalinskiHarabasz_Weight = CalinskiHarabasz_Weight/length(Ks);
DaviesBouldin_Weight  = DaviesBouldin_Weight /length(Ks);
Silhouette_Weight = Silhouette_Weight/length(Ks);
fide3 = fopen('CriterionValues.csv', 'w');
fprintf(fide3, '%s,%s,%s,%s\n', 'ClusterNum', 'CalinskiHarabasz', 'DaviesBouldin', 'Silhouette');
for i = 1:length(Ks)
    fprintf(fide3, 'K=%d,%f,%f,%f\n', Ks(i),  CalinskiHarabasz_Weight(i), DaviesBouldin_Weight(i), Silhouette_Weight(i));
end
fclose(fide3);


figure(1);
subplot(1, 3, 1);
plot(Ks, CalinskiHarabasz_Weight, 'r-s');
xlabel 'number of clusters';
ylabel 'Calinski Harabasz ';

subplot(1, 3, 2);
plot(Ks, DaviesBouldin_Weight, 'g-^');
xlabel 'number of clusters';
ylabel 'Davies Bouldin ';

subplot(1, 3, 3);
plot(Ks, Silhouette_Weight, 'b-^');
xlabel 'number of clusters';
ylabel 'Silhouette ';

set(gcf, 'position', get(0, 'ScreenSize'));
print(gcf, '-dpng', '曲线变化.png', '-r300');


fide2 = fopen('最佳聚类数汇总.csv', 'w');
fprintf(fide2, '%s,', '');
for i = 1:length(Ks)
    if i ~= length(Ks)
        fprintf(fide2, 'K=%d计数,', Ks(i));
    else
        fprintf(fide2, 'K=%d计数,%s\n', Ks(i), '最佳聚类数K');
    end
end
methodsList = {'Calinski-Harabasz (CH)', 'Davies-Bouldin (DB)', 'Silhouette'};
Tmatrix = [CalinskiHarabasz_Num; DaviesBouldin_Num; Silhouette_Num];
for i = 1:length(methodsList)
    fprintf(fide2, '%s,', methodsList{i});
    Tdata = Tmatrix(i,:);
    [~, I] = max(Tdata);
    for j = 1:length(Tdata)
        if j ~= length(Tdata)
            fprintf(fide2, '%d,', Tdata(j));
        else
            fprintf(fide2, '%d,K=%d\n', Tdata(j), Ks(I(1)));
        end
    end
end
fclose(fide2);

# SVD

stdr = std(Xdata2);  
[n, m] = size(Xdata2);
sddata = Xdata2./stdr(ones(n,1),:);         
[p, princ, egenvalue, latent, tsquare] = princomp(sddata);   
p = p(:, 1:m);                             
sc = princ(:, 1:m);                        
egenvalue;                                  
per = 100*(egenvalue)/sum(egenvalue);      

figure(2);


subplot(1,2,1);
S = svd(sddata);
S1 = S/sum(S);
plot(1:length(S1), S1, 'rs');
ylabel 'Singular Value';
xlabel 'SVD colum';

subplot(1,2,2);
plot(1:length(egenvalue), egenvalue, 'o');
set(gca, 'xlim', [0, length(egenvalue)]);
xlabel 'Principal Component';
ylabel 'Feature Contribution';
print(gcf, '-dpng', '贡献率变化图.png', '-r300');

fide3 = fopen('Singular_Value.csv', 'w');
fprintf(fide3, '%s,%s\n', 'RawData', 'Standardization');
for i = 1:length(S)
    fprintf(fide3, '%s,%s\n', num2str(S(i)), num2str(S1(i)));
end
fclose(fide3);


fide4 = fopen('贡献率变化.csv', 'w');
fprintf(fide4, '%s,%s,%s\n', '主成分编号', 'RawData', 'Standardization(%)');
for i = 1:length(egenvalue)
    fprintf(fide4, '%s,%s,%s\n', num2str(i), num2str(egenvalue(i)), num2str(per(i)));
end
fclose(fide4);

save Result;
